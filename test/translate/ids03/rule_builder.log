[2020-12-08 15:32:52,717][][DEBUG][translate.py][<module>][--------- TRANSLATION ---------]
[2020-12-08 15:32:52,717][][DEBUG][translate.py][<module>][--------- TRANSLATION ---------]
[2020-12-08 15:32:52,723][][DEBUG][translate.py][<module>][User Input Validation]
[2020-12-08 15:32:52,723][][DEBUG][translate.py][<module>][User Input Validation]
[2020-12-08 15:32:52,724][][DEBUG][translate.py][create_usr_graph][Parsing from file ids03.mi]
[2020-12-08 15:32:52,724][][DEBUG][translate.py][create_usr_graph][Parsing from file ids03.mi]
[2020-12-08 15:32:52,724][][DEBUG][translate.py][create_usr_graph][Parsing Content ASSERT|<java.util.logging.Logger: void severe(java.lang.String)>|is_attr_set(arg(1), "tainted", "sanitize_user_input")|IDS03-J]
[2020-12-08 15:32:52,724][][DEBUG][translate.py][create_usr_graph][Parsing Content ASSERT|<java.util.logging.Logger: void severe(java.lang.String)>|is_attr_set(arg(1), "tainted", "sanitize_user_input")|IDS03-J]
[2020-12-08 15:32:52,724][][DEBUG][TagAssert.py][add_entry][Assert detected]
[2020-12-08 15:32:52,724][][DEBUG][TagAssert.py][add_entry][Assert detected]
[2020-12-08 15:32:52,724][][DEBUG][TagAssert.py][__init__][Creating assert]
[2020-12-08 15:32:52,724][][DEBUG][TagAssert.py][__init__][Creating assert]
[2020-12-08 15:32:52,724][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 15:32:52,724][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 15:32:52,724][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 15:32:52,724][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 15:32:52,724][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 15:32:52,724][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 15:32:52,724][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 15:32:52,724][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 15:32:52,724][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 15:32:52,724][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 15:32:52,724][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 15:32:52,724][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 15:32:52,724][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 15:32:52,724][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 15:32:52,725][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 15:32:52,725][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 15:32:52,725][][DEBUG][TagAssert.py][add_entry][{'java.util.logging.Logger': {'void severe(java.lang.String)': [(Assert, severe, is_attr_set(arg(1), "tainted", "sanitize_user_input"), IDS03-J)]}}]
[2020-12-08 15:32:52,725][][DEBUG][TagAssert.py][add_entry][{'java.util.logging.Logger': {'void severe(java.lang.String)': [(Assert, severe, is_attr_set(arg(1), "tainted", "sanitize_user_input"), IDS03-J)]}}]
[2020-12-08 15:32:52,725][][DEBUG][translate.py][create_fsm][Converting the user model to FSM model]
[2020-12-08 15:32:52,725][][DEBUG][translate.py][create_fsm][Converting the user model to FSM model]
[2020-12-08 15:47:20,449][][DEBUG][translate.py][<module>][--------- TRANSLATION ---------]
[2020-12-08 15:47:20,449][][DEBUG][translate.py][<module>][--------- TRANSLATION ---------]
[2020-12-08 15:47:20,455][][DEBUG][translate.py][<module>][User Input Validation]
[2020-12-08 15:47:20,455][][DEBUG][translate.py][<module>][User Input Validation]
[2020-12-08 15:47:20,455][][DEBUG][translate.py][create_usr_graph][Parsing from file ids03.mi]
[2020-12-08 15:47:20,455][][DEBUG][translate.py][create_usr_graph][Parsing from file ids03.mi]
[2020-12-08 15:47:20,455][][DEBUG][translate.py][create_usr_graph][Parsing Content ASSERT|<java.util.logging.Logger: void severe(java.lang.String)>|is_attr_set(arg(1), "tainted", "sanitize_user_input")|IDS03-J]
[2020-12-08 15:47:20,455][][DEBUG][translate.py][create_usr_graph][Parsing Content ASSERT|<java.util.logging.Logger: void severe(java.lang.String)>|is_attr_set(arg(1), "tainted", "sanitize_user_input")|IDS03-J]
[2020-12-08 15:47:20,455][][DEBUG][TagAssert.py][add_entry][Assert detected]
[2020-12-08 15:47:20,455][][DEBUG][TagAssert.py][add_entry][Assert detected]
[2020-12-08 15:47:20,455][][DEBUG][TagAssert.py][__init__][Creating assert]
[2020-12-08 15:47:20,455][][DEBUG][TagAssert.py][__init__][Creating assert]
[2020-12-08 15:47:20,455][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 15:47:20,455][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 15:47:20,456][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 15:47:20,456][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 15:47:20,456][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 15:47:20,456][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 15:47:20,456][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 15:47:20,456][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 15:47:20,456][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 15:47:20,456][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 15:47:20,456][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 15:47:20,456][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 15:47:20,456][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 15:47:20,456][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 15:47:20,456][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 15:47:20,456][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 15:47:20,456][][DEBUG][TagAssert.py][add_entry][{'java.util.logging.Logger': {'void severe(java.lang.String)': [(Assert, severe, is_attr_set(arg(1), "tainted", "sanitize_user_input"), IDS03-J)]}}]
[2020-12-08 15:47:20,456][][DEBUG][TagAssert.py][add_entry][{'java.util.logging.Logger': {'void severe(java.lang.String)': [(Assert, severe, is_attr_set(arg(1), "tainted", "sanitize_user_input"), IDS03-J)]}}]
[2020-12-08 15:47:20,456][][DEBUG][translate.py][create_fsm][Converting the user model to FSM model]
[2020-12-08 15:47:20,456][][DEBUG][translate.py][create_fsm][Converting the user model to FSM model]
[2020-12-08 15:47:20,456][][INFO][TagAssert.py][create_file][Create path for java.util.logging.Logger]
[2020-12-08 15:47:20,456][][INFO][TagAssert.py][create_file][Create path for java.util.logging.Logger]
[2020-12-08 15:47:20,456][][DEBUG][TagAssert.py][create_file][file is java/util/logging/Logger.h]
[2020-12-08 15:47:20,456][][DEBUG][TagAssert.py][create_file][file is java/util/logging/Logger.h]
[2020-12-08 15:47:20,457][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/util/logging/Logger.h' mode='w' encoding='UTF-8'>]
[2020-12-08 15:47:20,457][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/util/logging/Logger.h' mode='w' encoding='UTF-8'>]
[2020-12-08 15:47:20,457][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 15:47:20,457][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 15:47:20,457][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 15:47:20,457][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 15:47:20,457][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 15:47:20,457][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 15:47:20,457][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 15:47:20,457][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 15:47:20,457][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 15:47:20,457][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 15:47:20,457][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 15:47:20,457][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 15:47:20,457][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 15:47:20,457][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 15:47:20,457][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 15:47:20,457][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 15:47:20,457][][DEBUG][TagAssert.py][write_func_signature][writing]
[2020-12-08 15:47:20,457][][DEBUG][TagAssert.py][write_func_signature][writing]
[2020-12-08 15:47:20,457][][DEBUG][TagAssert.py][write_func_body][writing (Assert, severe, is_attr_set(arg(1), "tainted", "sanitize_user_input"), IDS03-J) into java/util/logging/Logger.h]
[2020-12-08 15:47:20,457][][DEBUG][TagAssert.py][write_func_body][writing (Assert, severe, is_attr_set(arg(1), "tainted", "sanitize_user_input"), IDS03-J) into java/util/logging/Logger.h]
[2020-12-08 15:47:20,457][][DEBUG][TagAssert.py][write_func_body][raw string assert(is_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:47:20,457][][DEBUG][TagAssert.py][write_func_body][raw string assert(is_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:47:20,457][][DEBUG][ConditionParse.py][parse][---------------]
[2020-12-08 15:47:20,457][][DEBUG][ConditionParse.py][parse][---------------]
[2020-12-08 15:47:20,457][][DEBUG][ConditionParse.py][parse][Parsing condition: assert(is_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:47:20,457][][DEBUG][ConditionParse.py][parse][Parsing condition: assert(is_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:47:20,457][][DEBUG][ConditionParse.py][__init__][Node intialisation with assert(is_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:47:20,457][][DEBUG][ConditionParse.py][__init__][Node intialisation with assert(is_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:47:20,457][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:47:20,457][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:47:20,457][][DEBUG][ConditionParse.py][__init__][Parent: assert, children: is_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J"]
[2020-12-08 15:47:20,457][][DEBUG][ConditionParse.py][__init__][Parent: assert, children: is_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J"]
[2020-12-08 15:47:20,457][][DEBUG][ConditionParse.py][add_children][Adding ['is_attr_set(arg(1)', ' "tainted"', ' "sanitize_user_input")', '"IDS03-J"'] as children to assert]
[2020-12-08 15:47:20,457][][DEBUG][ConditionParse.py][add_children][Adding ['is_attr_set(arg(1)', ' "tainted"', ' "sanitize_user_input")', '"IDS03-J"'] as children to assert]
[2020-12-08 15:47:20,458][][DEBUG][ConditionParse.py][api_add_assert][children of RBC_ASSERT]
[2020-12-08 15:47:20,458][][DEBUG][ConditionParse.py][api_add_assert][children of RBC_ASSERT]
[2020-12-08 15:47:20,458][][DEBUG][ConditionParse.py][__init__][Node intialisation with is_attr_set(arg(1), "tainted", "sanitize_user_input")]
[2020-12-08 15:47:20,458][][DEBUG][ConditionParse.py][__init__][Node intialisation with is_attr_set(arg(1), "tainted", "sanitize_user_input")]
[2020-12-08 15:47:20,458][][ERROR][ConditionParse.py][__init__][is_attr_set not recognised as API]
[2020-12-08 15:47:20,458][][ERROR][ConditionParse.py][__init__][is_attr_set not recognised as API]
[2020-12-08 15:49:27,118][][DEBUG][translate.py][<module>][--------- TRANSLATION ---------]
[2020-12-08 15:49:27,118][][DEBUG][translate.py][<module>][--------- TRANSLATION ---------]
[2020-12-08 15:49:27,124][][DEBUG][translate.py][<module>][User Input Validation]
[2020-12-08 15:49:27,124][][DEBUG][translate.py][<module>][User Input Validation]
[2020-12-08 15:49:27,124][][DEBUG][translate.py][create_usr_graph][Parsing from file ids03.mi]
[2020-12-08 15:49:27,124][][DEBUG][translate.py][create_usr_graph][Parsing from file ids03.mi]
[2020-12-08 15:49:27,124][][DEBUG][translate.py][create_usr_graph][Parsing Content ASSERT|<java.util.logging.Logger: void severe(java.lang.String)>|is_tag_attr_set(arg(1), "tainted", "sanitize_user_input")|IDS03-J]
[2020-12-08 15:49:27,124][][DEBUG][translate.py][create_usr_graph][Parsing Content ASSERT|<java.util.logging.Logger: void severe(java.lang.String)>|is_tag_attr_set(arg(1), "tainted", "sanitize_user_input")|IDS03-J]
[2020-12-08 15:49:27,124][][DEBUG][TagAssert.py][add_entry][Assert detected]
[2020-12-08 15:49:27,124][][DEBUG][TagAssert.py][add_entry][Assert detected]
[2020-12-08 15:49:27,124][][DEBUG][TagAssert.py][__init__][Creating assert]
[2020-12-08 15:49:27,124][][DEBUG][TagAssert.py][__init__][Creating assert]
[2020-12-08 15:49:27,124][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 15:49:27,124][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 15:49:27,124][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 15:49:27,124][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 15:49:27,124][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 15:49:27,124][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 15:49:27,125][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 15:49:27,125][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 15:49:27,125][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 15:49:27,125][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 15:49:27,125][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 15:49:27,125][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 15:49:27,125][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 15:49:27,125][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 15:49:27,125][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 15:49:27,125][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 15:49:27,125][][DEBUG][TagAssert.py][add_entry][{'java.util.logging.Logger': {'void severe(java.lang.String)': [(Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"), IDS03-J)]}}]
[2020-12-08 15:49:27,125][][DEBUG][TagAssert.py][add_entry][{'java.util.logging.Logger': {'void severe(java.lang.String)': [(Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"), IDS03-J)]}}]
[2020-12-08 15:49:27,125][][DEBUG][translate.py][create_fsm][Converting the user model to FSM model]
[2020-12-08 15:49:27,125][][DEBUG][translate.py][create_fsm][Converting the user model to FSM model]
[2020-12-08 15:49:27,125][][INFO][TagAssert.py][create_file][Create path for java.util.logging.Logger]
[2020-12-08 15:49:27,125][][INFO][TagAssert.py][create_file][Create path for java.util.logging.Logger]
[2020-12-08 15:49:27,128][][DEBUG][TagAssert.py][create_file][file is java/util/logging/Logger.h]
[2020-12-08 15:49:27,128][][DEBUG][TagAssert.py][create_file][file is java/util/logging/Logger.h]
[2020-12-08 15:49:27,129][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/util/logging/Logger.h' mode='w' encoding='UTF-8'>]
[2020-12-08 15:49:27,129][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/util/logging/Logger.h' mode='w' encoding='UTF-8'>]
[2020-12-08 15:49:27,129][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 15:49:27,129][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 15:49:27,129][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 15:49:27,129][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 15:49:27,129][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 15:49:27,129][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 15:49:27,129][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 15:49:27,129][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 15:49:27,129][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 15:49:27,129][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 15:49:27,129][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 15:49:27,129][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 15:49:27,129][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 15:49:27,129][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 15:49:27,129][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 15:49:27,129][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 15:49:27,129][][DEBUG][TagAssert.py][write_func_signature][writing]
[2020-12-08 15:49:27,129][][DEBUG][TagAssert.py][write_func_signature][writing]
[2020-12-08 15:49:27,129][][DEBUG][TagAssert.py][write_func_body][writing (Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"), IDS03-J) into java/util/logging/Logger.h]
[2020-12-08 15:49:27,129][][DEBUG][TagAssert.py][write_func_body][writing (Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"), IDS03-J) into java/util/logging/Logger.h]
[2020-12-08 15:49:27,129][][DEBUG][TagAssert.py][write_func_body][raw string assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:49:27,129][][DEBUG][TagAssert.py][write_func_body][raw string assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:49:27,129][][DEBUG][ConditionParse.py][parse][---------------]
[2020-12-08 15:49:27,129][][DEBUG][ConditionParse.py][parse][---------------]
[2020-12-08 15:49:27,129][][DEBUG][ConditionParse.py][parse][Parsing condition: assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:49:27,129][][DEBUG][ConditionParse.py][parse][Parsing condition: assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:49:27,129][][DEBUG][ConditionParse.py][__init__][Node intialisation with assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:49:27,129][][DEBUG][ConditionParse.py][__init__][Node intialisation with assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:49:27,129][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:49:27,129][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:49:27,129][][DEBUG][ConditionParse.py][__init__][Parent: assert, children: is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J"]
[2020-12-08 15:49:27,129][][DEBUG][ConditionParse.py][__init__][Parent: assert, children: is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J"]
[2020-12-08 15:49:27,129][][DEBUG][ConditionParse.py][add_children][Adding ['is_tag_attr_set(arg(1)', ' "tainted"', ' "sanitize_user_input")', '"IDS03-J"'] as children to assert]
[2020-12-08 15:49:27,129][][DEBUG][ConditionParse.py][add_children][Adding ['is_tag_attr_set(arg(1)', ' "tainted"', ' "sanitize_user_input")', '"IDS03-J"'] as children to assert]
[2020-12-08 15:49:27,129][][DEBUG][ConditionParse.py][api_add_assert][children of RBC_ASSERT]
[2020-12-08 15:49:27,129][][DEBUG][ConditionParse.py][api_add_assert][children of RBC_ASSERT]
[2020-12-08 15:49:27,129][][DEBUG][ConditionParse.py][__init__][Node intialisation with is_tag_attr_set(arg(1), "tainted", "sanitize_user_input")]
[2020-12-08 15:49:27,129][][DEBUG][ConditionParse.py][__init__][Node intialisation with is_tag_attr_set(arg(1), "tainted", "sanitize_user_input")]
[2020-12-08 15:49:27,129][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:49:27,129][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:49:27,129][][DEBUG][ConditionParse.py][__init__][Parent: is_tag_attr_set, children: arg(1), "tainted", "sanitize_user_input"]
[2020-12-08 15:49:27,129][][DEBUG][ConditionParse.py][__init__][Parent: is_tag_attr_set, children: arg(1), "tainted", "sanitize_user_input"]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][add_children][Adding ['arg(1)', ' "tainted"', ' "sanitize_user_input"'] as children to is_tag_attr_set]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][add_children][Adding ['arg(1)', ' "tainted"', ' "sanitize_user_input"'] as children to is_tag_attr_set]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][api_add_is_attr_set][children of IS_ATTR_SET api]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][api_add_is_attr_set][children of IS_ATTR_SET api]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][__init__][Node intialisation with arg(1)]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][__init__][Node intialisation with arg(1)]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][__init__][Parent: arg, children: 1]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][__init__][Parent: arg, children: 1]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][add_children][Adding ['1'] as children to arg]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][add_children][Adding ['1'] as children to arg]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][api_add_arg][children of ARG api]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][api_add_arg][children of ARG api]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][__init__][Node intialisation with 1]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][__init__][Node intialisation with 1]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "tainted"]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "tainted"]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "sanitize_user_input"]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "sanitize_user_input"]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][__init__][Node intialisation with "IDS03-J"]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][__init__][Node intialisation with "IDS03-J"]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_user_input"]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_user_input"]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][ "sanitize_user_input" contains no children]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][ "sanitize_user_input" contains no children]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 15:49:27,130][][DEBUG][TagAssert.py][write_func_body][RBC_ASSERT(RBC_IS_TAG_ATTR_SET(GET_ARG(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:49:27,130][][DEBUG][TagAssert.py][write_func_body][RBC_ASSERT(RBC_IS_TAG_ATTR_SET(GET_ARG(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_user_input"]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_user_input"]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][ "sanitize_user_input" contains no children]
[2020-12-08 15:49:27,130][][DEBUG][ConditionParse.py][translate][ "sanitize_user_input" contains no children]
[2020-12-08 15:49:27,131][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 15:49:27,131][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 15:49:27,131][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 15:49:27,131][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 15:49:27,131][][DEBUG][TagAssert.py][write_ret][write_ret params: void]
[2020-12-08 15:49:27,131][][DEBUG][TagAssert.py][write_ret][write_ret params: void]
[2020-12-08 15:49:27,131][][DEBUG][TagAssert.py][write_ret][to write: ]
[2020-12-08 15:49:27,131][][DEBUG][TagAssert.py][write_ret][to write: ]
[2020-12-08 15:49:27,131][][DEBUG][TagAssert.py][generate][Dependencies: {'java.lang.String'}]
[2020-12-08 15:49:27,131][][DEBUG][TagAssert.py][generate][Dependencies: {'java.lang.String'}]
[2020-12-08 15:49:27,131][][DEBUG][TagAssert.py][create_dep_files][creating dep files with {'java.lang.String'}]
[2020-12-08 15:49:27,131][][DEBUG][TagAssert.py][create_dep_files][creating dep files with {'java.lang.String'}]
[2020-12-08 15:49:27,131][][INFO][TagAssert.py][create_file][Create path for java.lang.String]
[2020-12-08 15:49:27,131][][INFO][TagAssert.py][create_file][Create path for java.lang.String]
[2020-12-08 15:49:27,131][][DEBUG][TagAssert.py][create_file][file is java/lang/String.h]
[2020-12-08 15:49:27,131][][DEBUG][TagAssert.py][create_file][file is java/lang/String.h]
[2020-12-08 15:49:27,131][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/lang/String.h' mode='w' encoding='UTF-8'>]
[2020-12-08 15:49:27,131][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/lang/String.h' mode='w' encoding='UTF-8'>]
[2020-12-08 15:49:27,131][][INFO][translate.py][<module>][Writing into rule.java]
[2020-12-08 15:49:27,131][][INFO][translate.py][<module>][Writing into rule.java]
[2020-12-08 15:49:48,882][][DEBUG][translate.py][<module>][--------- TRANSLATION ---------]
[2020-12-08 15:49:48,882][][DEBUG][translate.py][<module>][--------- TRANSLATION ---------]
[2020-12-08 15:49:48,886][][DEBUG][translate.py][<module>][User Input Validation]
[2020-12-08 15:49:48,886][][DEBUG][translate.py][<module>][User Input Validation]
[2020-12-08 15:49:48,886][][DEBUG][translate.py][create_usr_graph][Parsing from file ids03.mi]
[2020-12-08 15:49:48,886][][DEBUG][translate.py][create_usr_graph][Parsing from file ids03.mi]
[2020-12-08 15:49:48,886][][DEBUG][translate.py][create_usr_graph][Parsing Content ASSERT|<java.util.logging.Logger: void severe(java.lang.String)>|is_tag_attr_set(arg(1), "tainted", "sanitize_user_input")|IDS03-J]
[2020-12-08 15:49:48,886][][DEBUG][translate.py][create_usr_graph][Parsing Content ASSERT|<java.util.logging.Logger: void severe(java.lang.String)>|is_tag_attr_set(arg(1), "tainted", "sanitize_user_input")|IDS03-J]
[2020-12-08 15:49:48,886][][DEBUG][TagAssert.py][add_entry][Assert detected]
[2020-12-08 15:49:48,886][][DEBUG][TagAssert.py][add_entry][Assert detected]
[2020-12-08 15:49:48,886][][DEBUG][TagAssert.py][__init__][Creating assert]
[2020-12-08 15:49:48,886][][DEBUG][TagAssert.py][__init__][Creating assert]
[2020-12-08 15:49:48,886][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 15:49:48,886][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 15:49:48,887][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 15:49:48,887][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 15:49:48,887][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 15:49:48,887][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 15:49:48,887][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 15:49:48,887][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 15:49:48,887][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 15:49:48,887][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 15:49:48,887][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 15:49:48,887][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 15:49:48,887][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 15:49:48,887][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 15:49:48,887][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 15:49:48,887][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 15:49:48,887][][DEBUG][TagAssert.py][add_entry][{'java.util.logging.Logger': {'void severe(java.lang.String)': [(Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"), IDS03-J)]}}]
[2020-12-08 15:49:48,887][][DEBUG][TagAssert.py][add_entry][{'java.util.logging.Logger': {'void severe(java.lang.String)': [(Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"), IDS03-J)]}}]
[2020-12-08 15:49:48,887][][DEBUG][translate.py][create_fsm][Converting the user model to FSM model]
[2020-12-08 15:49:48,887][][DEBUG][translate.py][create_fsm][Converting the user model to FSM model]
[2020-12-08 15:49:48,887][][INFO][TagAssert.py][create_file][Create path for java.util.logging.Logger]
[2020-12-08 15:49:48,887][][INFO][TagAssert.py][create_file][Create path for java.util.logging.Logger]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][create_file][file is java/util/logging/Logger.h]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][create_file][file is java/util/logging/Logger.h]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/util/logging/Logger.h' mode='w' encoding='UTF-8'>]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/util/logging/Logger.h' mode='w' encoding='UTF-8'>]
[2020-12-08 15:49:48,888][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 15:49:48,888][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][write_func_signature][writing]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][write_func_signature][writing]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][write_func_body][writing (Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"), IDS03-J) into java/util/logging/Logger.h]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][write_func_body][writing (Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"), IDS03-J) into java/util/logging/Logger.h]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][write_func_body][raw string assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:49:48,888][][DEBUG][TagAssert.py][write_func_body][raw string assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:49:48,888][][DEBUG][ConditionParse.py][parse][---------------]
[2020-12-08 15:49:48,888][][DEBUG][ConditionParse.py][parse][---------------]
[2020-12-08 15:49:48,888][][DEBUG][ConditionParse.py][parse][Parsing condition: assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:49:48,888][][DEBUG][ConditionParse.py][parse][Parsing condition: assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:49:48,888][][DEBUG][ConditionParse.py][__init__][Node intialisation with assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:49:48,888][][DEBUG][ConditionParse.py][__init__][Node intialisation with assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:49:48,888][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:49:48,888][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:49:48,889][][DEBUG][ConditionParse.py][__init__][Parent: assert, children: is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J"]
[2020-12-08 15:49:48,889][][DEBUG][ConditionParse.py][__init__][Parent: assert, children: is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J"]
[2020-12-08 15:49:48,889][][DEBUG][ConditionParse.py][add_children][Adding ['is_tag_attr_set(arg(1)', ' "tainted"', ' "sanitize_user_input")', '"IDS03-J"'] as children to assert]
[2020-12-08 15:49:48,889][][DEBUG][ConditionParse.py][add_children][Adding ['is_tag_attr_set(arg(1)', ' "tainted"', ' "sanitize_user_input")', '"IDS03-J"'] as children to assert]
[2020-12-08 15:49:48,889][][DEBUG][ConditionParse.py][api_add_assert][children of RBC_ASSERT]
[2020-12-08 15:49:48,889][][DEBUG][ConditionParse.py][api_add_assert][children of RBC_ASSERT]
[2020-12-08 15:49:48,889][][DEBUG][ConditionParse.py][__init__][Node intialisation with is_tag_attr_set(arg(1), "tainted", "sanitize_user_input")]
[2020-12-08 15:49:48,889][][DEBUG][ConditionParse.py][__init__][Node intialisation with is_tag_attr_set(arg(1), "tainted", "sanitize_user_input")]
[2020-12-08 15:49:48,889][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:49:48,889][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:49:48,889][][DEBUG][ConditionParse.py][__init__][Parent: is_tag_attr_set, children: arg(1), "tainted", "sanitize_user_input"]
[2020-12-08 15:49:48,889][][DEBUG][ConditionParse.py][__init__][Parent: is_tag_attr_set, children: arg(1), "tainted", "sanitize_user_input"]
[2020-12-08 15:49:48,889][][DEBUG][ConditionParse.py][add_children][Adding ['arg(1)', ' "tainted"', ' "sanitize_user_input"'] as children to is_tag_attr_set]
[2020-12-08 15:49:48,889][][DEBUG][ConditionParse.py][add_children][Adding ['arg(1)', ' "tainted"', ' "sanitize_user_input"'] as children to is_tag_attr_set]
[2020-12-08 15:49:48,889][][DEBUG][ConditionParse.py][api_add_is_attr_set][children of IS_ATTR_SET api]
[2020-12-08 15:49:48,889][][DEBUG][ConditionParse.py][api_add_is_attr_set][children of IS_ATTR_SET api]
[2020-12-08 15:49:48,889][][DEBUG][ConditionParse.py][__init__][Node intialisation with arg(1)]
[2020-12-08 15:49:48,889][][DEBUG][ConditionParse.py][__init__][Node intialisation with arg(1)]
[2020-12-08 15:49:48,889][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:49:48,889][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:49:48,889][][DEBUG][ConditionParse.py][__init__][Parent: arg, children: 1]
[2020-12-08 15:49:48,889][][DEBUG][ConditionParse.py][__init__][Parent: arg, children: 1]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][add_children][Adding ['1'] as children to arg]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][add_children][Adding ['1'] as children to arg]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][api_add_arg][children of ARG api]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][api_add_arg][children of ARG api]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][__init__][Node intialisation with 1]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][__init__][Node intialisation with 1]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "tainted"]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "tainted"]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "sanitize_user_input"]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "sanitize_user_input"]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][__init__][Node intialisation with "IDS03-J"]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][__init__][Node intialisation with "IDS03-J"]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_user_input"]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_user_input"]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][ "sanitize_user_input" contains no children]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][ "sanitize_user_input" contains no children]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 15:49:48,894][][DEBUG][TagAssert.py][write_func_body][RBC_ASSERT(RBC_IS_TAG_ATTR_SET(GET_ARG(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:49:48,894][][DEBUG][TagAssert.py][write_func_body][RBC_ASSERT(RBC_IS_TAG_ATTR_SET(GET_ARG(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 15:49:48,894][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 15:49:48,895][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 15:49:48,895][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 15:49:48,895][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 15:49:48,895][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 15:49:48,895][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 15:49:48,895][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 15:49:48,895][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_user_input"]
[2020-12-08 15:49:48,895][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_user_input"]
[2020-12-08 15:49:48,895][][DEBUG][ConditionParse.py][translate][ "sanitize_user_input" contains no children]
[2020-12-08 15:49:48,895][][DEBUG][ConditionParse.py][translate][ "sanitize_user_input" contains no children]
[2020-12-08 15:49:48,895][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 15:49:48,895][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 15:49:48,895][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 15:49:48,895][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 15:49:48,895][][DEBUG][TagAssert.py][write_ret][write_ret params: void]
[2020-12-08 15:49:48,895][][DEBUG][TagAssert.py][write_ret][write_ret params: void]
[2020-12-08 15:49:48,895][][DEBUG][TagAssert.py][write_ret][to write: ]
[2020-12-08 15:49:48,895][][DEBUG][TagAssert.py][write_ret][to write: ]
[2020-12-08 15:49:48,895][][DEBUG][TagAssert.py][generate][Dependencies: {'java.lang.String'}]
[2020-12-08 15:49:48,895][][DEBUG][TagAssert.py][generate][Dependencies: {'java.lang.String'}]
[2020-12-08 15:49:48,895][][DEBUG][TagAssert.py][create_dep_files][creating dep files with {'java.lang.String'}]
[2020-12-08 15:49:48,895][][DEBUG][TagAssert.py][create_dep_files][creating dep files with {'java.lang.String'}]
[2020-12-08 15:49:48,895][][INFO][TagAssert.py][create_file][Create path for java.lang.String]
[2020-12-08 15:49:48,895][][INFO][TagAssert.py][create_file][Create path for java.lang.String]
[2020-12-08 15:49:48,895][][DEBUG][TagAssert.py][create_file][file is java/lang/String.h]
[2020-12-08 15:49:48,895][][DEBUG][TagAssert.py][create_file][file is java/lang/String.h]
[2020-12-08 15:49:48,895][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/lang/String.h' mode='w' encoding='UTF-8'>]
[2020-12-08 15:49:48,895][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/lang/String.h' mode='w' encoding='UTF-8'>]
[2020-12-08 15:49:48,895][][INFO][translate.py][<module>][Writing into rule.java]
[2020-12-08 15:49:48,895][][INFO][translate.py][<module>][Writing into rule.java]
[2020-12-08 15:50:03,846][][DEBUG][translate.py][<module>][--------- TRANSLATION ---------]
[2020-12-08 15:50:03,846][][DEBUG][translate.py][<module>][--------- TRANSLATION ---------]
[2020-12-08 15:50:03,854][][DEBUG][translate.py][<module>][User Input Validation]
[2020-12-08 15:50:03,854][][DEBUG][translate.py][<module>][User Input Validation]
[2020-12-08 15:50:03,854][][DEBUG][translate.py][create_usr_graph][Parsing from file ids03.mi]
[2020-12-08 15:50:03,854][][DEBUG][translate.py][create_usr_graph][Parsing from file ids03.mi]
[2020-12-08 15:50:03,854][][DEBUG][translate.py][create_usr_graph][Parsing Content ASSERT|<java.util.logging.Logger: void severe(java.lang.String)>|is_tag_attr_set(arg(1), "tainted", "sanitize_user_input")|IDS03-J]
[2020-12-08 15:50:03,854][][DEBUG][translate.py][create_usr_graph][Parsing Content ASSERT|<java.util.logging.Logger: void severe(java.lang.String)>|is_tag_attr_set(arg(1), "tainted", "sanitize_user_input")|IDS03-J]
[2020-12-08 15:50:03,854][][DEBUG][TagAssert.py][add_entry][Assert detected]
[2020-12-08 15:50:03,854][][DEBUG][TagAssert.py][add_entry][Assert detected]
[2020-12-08 15:50:03,854][][DEBUG][TagAssert.py][__init__][Creating assert]
[2020-12-08 15:50:03,854][][DEBUG][TagAssert.py][__init__][Creating assert]
[2020-12-08 15:50:03,854][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 15:50:03,854][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 15:50:03,854][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 15:50:03,854][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 15:50:03,854][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 15:50:03,854][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 15:50:03,855][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 15:50:03,855][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 15:50:03,855][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 15:50:03,855][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 15:50:03,855][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 15:50:03,855][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 15:50:03,855][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 15:50:03,855][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 15:50:03,855][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 15:50:03,855][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 15:50:03,855][][DEBUG][TagAssert.py][add_entry][{'java.util.logging.Logger': {'void severe(java.lang.String)': [(Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"), IDS03-J)]}}]
[2020-12-08 15:50:03,855][][DEBUG][TagAssert.py][add_entry][{'java.util.logging.Logger': {'void severe(java.lang.String)': [(Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"), IDS03-J)]}}]
[2020-12-08 15:50:03,855][][DEBUG][translate.py][create_fsm][Converting the user model to FSM model]
[2020-12-08 15:50:03,855][][DEBUG][translate.py][create_fsm][Converting the user model to FSM model]
[2020-12-08 15:50:03,855][][INFO][TagAssert.py][create_file][Create path for java.util.logging.Logger]
[2020-12-08 15:50:03,855][][INFO][TagAssert.py][create_file][Create path for java.util.logging.Logger]
[2020-12-08 15:50:03,855][][DEBUG][TagAssert.py][create_file][file is java/util/logging/Logger.h]
[2020-12-08 15:50:03,855][][DEBUG][TagAssert.py][create_file][file is java/util/logging/Logger.h]
[2020-12-08 15:50:03,855][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/util/logging/Logger.h' mode='w' encoding='UTF-8'>]
[2020-12-08 15:50:03,855][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/util/logging/Logger.h' mode='w' encoding='UTF-8'>]
[2020-12-08 15:50:03,856][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 15:50:03,856][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 15:50:03,856][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 15:50:03,856][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 15:50:03,856][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 15:50:03,856][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 15:50:03,856][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 15:50:03,856][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 15:50:03,856][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 15:50:03,856][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 15:50:03,856][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 15:50:03,856][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 15:50:03,856][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 15:50:03,856][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 15:50:03,856][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 15:50:03,856][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 15:50:03,856][][DEBUG][TagAssert.py][write_func_signature][writing]
[2020-12-08 15:50:03,856][][DEBUG][TagAssert.py][write_func_signature][writing]
[2020-12-08 15:50:03,856][][DEBUG][TagAssert.py][write_func_body][writing (Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"), IDS03-J) into java/util/logging/Logger.h]
[2020-12-08 15:50:03,856][][DEBUG][TagAssert.py][write_func_body][writing (Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"), IDS03-J) into java/util/logging/Logger.h]
[2020-12-08 15:50:03,856][][DEBUG][TagAssert.py][write_func_body][raw string assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:50:03,856][][DEBUG][TagAssert.py][write_func_body][raw string assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:50:03,856][][DEBUG][ConditionParse.py][parse][---------------]
[2020-12-08 15:50:03,856][][DEBUG][ConditionParse.py][parse][---------------]
[2020-12-08 15:50:03,856][][DEBUG][ConditionParse.py][parse][Parsing condition: assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:50:03,856][][DEBUG][ConditionParse.py][parse][Parsing condition: assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:50:03,856][][DEBUG][ConditionParse.py][__init__][Node intialisation with assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:50:03,856][][DEBUG][ConditionParse.py][__init__][Node intialisation with assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:50:03,856][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:50:03,856][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:50:03,856][][DEBUG][ConditionParse.py][__init__][Parent: assert, children: is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J"]
[2020-12-08 15:50:03,856][][DEBUG][ConditionParse.py][__init__][Parent: assert, children: is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J"]
[2020-12-08 15:50:03,856][][DEBUG][ConditionParse.py][add_children][Adding ['is_tag_attr_set(arg(1)', ' "tainted"', ' "sanitize_user_input")', '"IDS03-J"'] as children to assert]
[2020-12-08 15:50:03,856][][DEBUG][ConditionParse.py][add_children][Adding ['is_tag_attr_set(arg(1)', ' "tainted"', ' "sanitize_user_input")', '"IDS03-J"'] as children to assert]
[2020-12-08 15:50:03,856][][DEBUG][ConditionParse.py][api_add_assert][children of RBC_ASSERT]
[2020-12-08 15:50:03,856][][DEBUG][ConditionParse.py][api_add_assert][children of RBC_ASSERT]
[2020-12-08 15:50:03,856][][DEBUG][ConditionParse.py][__init__][Node intialisation with is_tag_attr_set(arg(1), "tainted", "sanitize_user_input")]
[2020-12-08 15:50:03,856][][DEBUG][ConditionParse.py][__init__][Node intialisation with is_tag_attr_set(arg(1), "tainted", "sanitize_user_input")]
[2020-12-08 15:50:03,856][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:50:03,856][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:50:03,856][][DEBUG][ConditionParse.py][__init__][Parent: is_tag_attr_set, children: arg(1), "tainted", "sanitize_user_input"]
[2020-12-08 15:50:03,856][][DEBUG][ConditionParse.py][__init__][Parent: is_tag_attr_set, children: arg(1), "tainted", "sanitize_user_input"]
[2020-12-08 15:50:03,856][][DEBUG][ConditionParse.py][add_children][Adding ['arg(1)', ' "tainted"', ' "sanitize_user_input"'] as children to is_tag_attr_set]
[2020-12-08 15:50:03,856][][DEBUG][ConditionParse.py][add_children][Adding ['arg(1)', ' "tainted"', ' "sanitize_user_input"'] as children to is_tag_attr_set]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][api_add_is_attr_set][children of IS_ATTR_SET api]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][api_add_is_attr_set][children of IS_ATTR_SET api]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][__init__][Node intialisation with arg(1)]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][__init__][Node intialisation with arg(1)]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][__init__][Parent: arg, children: 1]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][__init__][Parent: arg, children: 1]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][add_children][Adding ['1'] as children to arg]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][add_children][Adding ['1'] as children to arg]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][api_add_arg][children of ARG api]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][api_add_arg][children of ARG api]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][__init__][Node intialisation with 1]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][__init__][Node intialisation with 1]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "tainted"]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "tainted"]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "sanitize_user_input"]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "sanitize_user_input"]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][__init__][Node intialisation with "IDS03-J"]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][__init__][Node intialisation with "IDS03-J"]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 15:50:03,861][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_user_input"]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_user_input"]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][ "sanitize_user_input" contains no children]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][ "sanitize_user_input" contains no children]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 15:50:03,862][][DEBUG][TagAssert.py][write_func_body][RBC_ASSERT(RBC_IS_TAG_ATTR_SET(GET_ARG(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:50:03,862][][DEBUG][TagAssert.py][write_func_body][RBC_ASSERT(RBC_IS_TAG_ATTR_SET(GET_ARG(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_user_input"]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_user_input"]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][ "sanitize_user_input" contains no children]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][ "sanitize_user_input" contains no children]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 15:50:03,862][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 15:50:03,862][][DEBUG][TagAssert.py][write_ret][write_ret params: void]
[2020-12-08 15:50:03,862][][DEBUG][TagAssert.py][write_ret][write_ret params: void]
[2020-12-08 15:50:03,862][][DEBUG][TagAssert.py][write_ret][to write: ]
[2020-12-08 15:50:03,862][][DEBUG][TagAssert.py][write_ret][to write: ]
[2020-12-08 15:50:03,862][][DEBUG][TagAssert.py][generate][Dependencies: {'java.lang.String'}]
[2020-12-08 15:50:03,862][][DEBUG][TagAssert.py][generate][Dependencies: {'java.lang.String'}]
[2020-12-08 15:50:03,862][][DEBUG][TagAssert.py][create_dep_files][creating dep files with {'java.lang.String'}]
[2020-12-08 15:50:03,862][][DEBUG][TagAssert.py][create_dep_files][creating dep files with {'java.lang.String'}]
[2020-12-08 15:50:03,862][][INFO][TagAssert.py][create_file][Create path for java.lang.String]
[2020-12-08 15:50:03,862][][INFO][TagAssert.py][create_file][Create path for java.lang.String]
[2020-12-08 15:50:03,862][][DEBUG][TagAssert.py][create_file][file is java/lang/String.h]
[2020-12-08 15:50:03,862][][DEBUG][TagAssert.py][create_file][file is java/lang/String.h]
[2020-12-08 15:50:03,862][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/lang/String.h' mode='w' encoding='UTF-8'>]
[2020-12-08 15:50:03,862][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/lang/String.h' mode='w' encoding='UTF-8'>]
[2020-12-08 15:50:03,863][][INFO][translate.py][<module>][Writing into rule.java]
[2020-12-08 15:50:03,863][][INFO][translate.py][<module>][Writing into rule.java]
[2020-12-08 15:52:27,645][][DEBUG][translate.py][<module>][--------- TRANSLATION ---------]
[2020-12-08 15:52:27,645][][DEBUG][translate.py][<module>][--------- TRANSLATION ---------]
[2020-12-08 15:52:27,651][][DEBUG][translate.py][<module>][User Input Validation]
[2020-12-08 15:52:27,651][][DEBUG][translate.py][<module>][User Input Validation]
[2020-12-08 15:52:27,651][][DEBUG][translate.py][create_usr_graph][Parsing from file ids03.mi]
[2020-12-08 15:52:27,651][][DEBUG][translate.py][create_usr_graph][Parsing from file ids03.mi]
[2020-12-08 15:52:27,651][][DEBUG][translate.py][create_usr_graph][Parsing Content ASSERT|<java.util.logging.Logger: void severe(java.lang.String)>|is_tag_attr_set(arg(1), "tainted", "sanitize_user_input")|IDS03-J]
[2020-12-08 15:52:27,651][][DEBUG][translate.py][create_usr_graph][Parsing Content ASSERT|<java.util.logging.Logger: void severe(java.lang.String)>|is_tag_attr_set(arg(1), "tainted", "sanitize_user_input")|IDS03-J]
[2020-12-08 15:52:27,651][][DEBUG][TagAssert.py][add_entry][Assert detected]
[2020-12-08 15:52:27,651][][DEBUG][TagAssert.py][add_entry][Assert detected]
[2020-12-08 15:52:27,651][][DEBUG][TagAssert.py][__init__][Creating assert]
[2020-12-08 15:52:27,651][][DEBUG][TagAssert.py][__init__][Creating assert]
[2020-12-08 15:52:27,651][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 15:52:27,651][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 15:52:27,651][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 15:52:27,651][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 15:52:27,651][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 15:52:27,651][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 15:52:27,651][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 15:52:27,651][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 15:52:27,651][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 15:52:27,651][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 15:52:27,652][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 15:52:27,652][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 15:52:27,652][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 15:52:27,652][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 15:52:27,652][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 15:52:27,652][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 15:52:27,652][][DEBUG][TagAssert.py][add_entry][{'java.util.logging.Logger': {'void severe(java.lang.String)': [(Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"), IDS03-J)]}}]
[2020-12-08 15:52:27,652][][DEBUG][TagAssert.py][add_entry][{'java.util.logging.Logger': {'void severe(java.lang.String)': [(Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"), IDS03-J)]}}]
[2020-12-08 15:52:27,652][][DEBUG][translate.py][create_fsm][Converting the user model to FSM model]
[2020-12-08 15:52:27,652][][DEBUG][translate.py][create_fsm][Converting the user model to FSM model]
[2020-12-08 15:52:27,652][][INFO][TagAssert.py][create_file][Create path for java.util.logging.Logger]
[2020-12-08 15:52:27,652][][INFO][TagAssert.py][create_file][Create path for java.util.logging.Logger]
[2020-12-08 15:52:27,652][][DEBUG][TagAssert.py][create_file][file is java/util/logging/Logger.h]
[2020-12-08 15:52:27,652][][DEBUG][TagAssert.py][create_file][file is java/util/logging/Logger.h]
[2020-12-08 15:52:27,652][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/util/logging/Logger.h' mode='w' encoding='UTF-8'>]
[2020-12-08 15:52:27,652][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/util/logging/Logger.h' mode='w' encoding='UTF-8'>]
[2020-12-08 15:52:27,652][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 15:52:27,652][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 15:52:27,652][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 15:52:27,652][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 15:52:27,652][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 15:52:27,652][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 15:52:27,653][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 15:52:27,653][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 15:52:27,653][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 15:52:27,653][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 15:52:27,653][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 15:52:27,653][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 15:52:27,653][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 15:52:27,653][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 15:52:27,653][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 15:52:27,653][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 15:52:27,653][][DEBUG][TagAssert.py][write_func_signature][writing]
[2020-12-08 15:52:27,653][][DEBUG][TagAssert.py][write_func_signature][writing]
[2020-12-08 15:52:27,653][][DEBUG][TagAssert.py][write_func_body][writing (Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"), IDS03-J) into java/util/logging/Logger.h]
[2020-12-08 15:52:27,653][][DEBUG][TagAssert.py][write_func_body][writing (Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"), IDS03-J) into java/util/logging/Logger.h]
[2020-12-08 15:52:27,653][][DEBUG][TagAssert.py][write_func_body][raw string assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:52:27,653][][DEBUG][TagAssert.py][write_func_body][raw string assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][parse][---------------]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][parse][---------------]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][parse][Parsing condition: assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][parse][Parsing condition: assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][__init__][Node intialisation with assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][__init__][Node intialisation with assert(is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][__init__][Parent: assert, children: is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J"]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][__init__][Parent: assert, children: is_tag_attr_set(arg(1), "tainted", "sanitize_user_input"),"IDS03-J"]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][add_children][Adding ['is_tag_attr_set(arg(1)', ' "tainted"', ' "sanitize_user_input")', '"IDS03-J"'] as children to assert]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][add_children][Adding ['is_tag_attr_set(arg(1)', ' "tainted"', ' "sanitize_user_input")', '"IDS03-J"'] as children to assert]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][api_add_assert][children of RBC_ASSERT]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][api_add_assert][children of RBC_ASSERT]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][__init__][Node intialisation with is_tag_attr_set(arg(1), "tainted", "sanitize_user_input")]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][__init__][Node intialisation with is_tag_attr_set(arg(1), "tainted", "sanitize_user_input")]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][__init__][Parent: is_tag_attr_set, children: arg(1), "tainted", "sanitize_user_input"]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][__init__][Parent: is_tag_attr_set, children: arg(1), "tainted", "sanitize_user_input"]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][add_children][Adding ['arg(1)', ' "tainted"', ' "sanitize_user_input"'] as children to is_tag_attr_set]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][add_children][Adding ['arg(1)', ' "tainted"', ' "sanitize_user_input"'] as children to is_tag_attr_set]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][api_add_is_attr_set][children of IS_ATTR_SET api]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][api_add_is_attr_set][children of IS_ATTR_SET api]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][__init__][Node intialisation with arg(1)]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][__init__][Node intialisation with arg(1)]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][__init__][Parent: arg, children: 1]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][__init__][Parent: arg, children: 1]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][add_children][Adding ['1'] as children to arg]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][add_children][Adding ['1'] as children to arg]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][api_add_arg][children of ARG api]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][api_add_arg][children of ARG api]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][__init__][Node intialisation with 1]
[2020-12-08 15:52:27,653][][DEBUG][ConditionParse.py][__init__][Node intialisation with 1]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "tainted"]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "tainted"]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "sanitize_user_input"]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "sanitize_user_input"]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][__init__][Node intialisation with "IDS03-J"]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][__init__][Node intialisation with "IDS03-J"]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_user_input"]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_user_input"]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][ "sanitize_user_input" contains no children]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][ "sanitize_user_input" contains no children]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 15:52:27,654][][DEBUG][TagAssert.py][write_func_body][RBC_ASSERT(RBC_IS_TAG_ATTR_SET(GET_ARG(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:52:27,654][][DEBUG][TagAssert.py][write_func_body][RBC_ASSERT(RBC_IS_TAG_ATTR_SET(GET_ARG(1), "tainted", "sanitize_user_input"),"IDS03-J")]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_user_input"]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_user_input"]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][ "sanitize_user_input" contains no children]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][ "sanitize_user_input" contains no children]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 15:52:27,654][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 15:52:27,654][][DEBUG][TagAssert.py][write_ret][write_ret params: void]
[2020-12-08 15:52:27,654][][DEBUG][TagAssert.py][write_ret][write_ret params: void]
[2020-12-08 15:52:27,654][][DEBUG][TagAssert.py][write_ret][to write: ]
[2020-12-08 15:52:27,654][][DEBUG][TagAssert.py][write_ret][to write: ]
[2020-12-08 15:52:27,654][][DEBUG][TagAssert.py][generate][Dependencies: {'java.lang.String'}]
[2020-12-08 15:52:27,654][][DEBUG][TagAssert.py][generate][Dependencies: {'java.lang.String'}]
[2020-12-08 15:52:27,654][][DEBUG][TagAssert.py][create_dep_files][creating dep files with {'java.lang.String'}]
[2020-12-08 15:52:27,654][][DEBUG][TagAssert.py][create_dep_files][creating dep files with {'java.lang.String'}]
[2020-12-08 15:52:27,654][][INFO][TagAssert.py][create_file][Create path for java.lang.String]
[2020-12-08 15:52:27,654][][INFO][TagAssert.py][create_file][Create path for java.lang.String]
[2020-12-08 15:52:27,657][][DEBUG][TagAssert.py][create_file][file is java/lang/String.h]
[2020-12-08 15:52:27,657][][DEBUG][TagAssert.py][create_file][file is java/lang/String.h]
[2020-12-08 15:52:27,657][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/lang/String.h' mode='w' encoding='UTF-8'>]
[2020-12-08 15:52:27,657][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/lang/String.h' mode='w' encoding='UTF-8'>]
[2020-12-08 15:52:27,657][][INFO][translate.py][<module>][Writing into rule.java]
[2020-12-08 15:52:27,657][][INFO][translate.py][<module>][Writing into rule.java]
[2020-12-08 16:13:26,326][][DEBUG][translate.py][<module>][--------- TRANSLATION ---------]
[2020-12-08 16:13:26,326][][DEBUG][translate.py][<module>][--------- TRANSLATION ---------]
[2020-12-08 16:13:26,334][][DEBUG][translate.py][<module>][User Input Validation]
[2020-12-08 16:13:26,334][][DEBUG][translate.py][<module>][User Input Validation]
[2020-12-08 16:13:26,334][][DEBUG][translate.py][create_usr_graph][Parsing from file ids03.mi]
[2020-12-08 16:13:26,334][][DEBUG][translate.py][create_usr_graph][Parsing from file ids03.mi]
[2020-12-08 16:13:26,334][][DEBUG][translate.py][create_usr_graph][Parsing Content ASSERT|<java.util.logging.Logger: void severe(java.lang.String)>|is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str")|IDS03-J]
[2020-12-08 16:13:26,334][][DEBUG][translate.py][create_usr_graph][Parsing Content ASSERT|<java.util.logging.Logger: void severe(java.lang.String)>|is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str")|IDS03-J]
[2020-12-08 16:13:26,334][][DEBUG][TagAssert.py][add_entry][Assert detected]
[2020-12-08 16:13:26,334][][DEBUG][TagAssert.py][add_entry][Assert detected]
[2020-12-08 16:13:26,335][][DEBUG][TagAssert.py][__init__][Creating assert]
[2020-12-08 16:13:26,335][][DEBUG][TagAssert.py][__init__][Creating assert]
[2020-12-08 16:13:26,335][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 16:13:26,335][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 16:13:26,335][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 16:13:26,335][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 16:13:26,335][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 16:13:26,335][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 16:13:26,335][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 16:13:26,335][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 16:13:26,335][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 16:13:26,335][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 16:13:26,335][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 16:13:26,335][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 16:13:26,335][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 16:13:26,335][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 16:13:26,335][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 16:13:26,335][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 16:13:26,336][][DEBUG][TagAssert.py][add_entry][{'java.util.logging.Logger': {'void severe(java.lang.String)': [(Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"), IDS03-J)]}}]
[2020-12-08 16:13:26,336][][DEBUG][TagAssert.py][add_entry][{'java.util.logging.Logger': {'void severe(java.lang.String)': [(Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"), IDS03-J)]}}]
[2020-12-08 16:13:26,336][][DEBUG][translate.py][create_usr_graph][Parsing Content ASSERT|<java.util.logging.Logger: void info(java.lang.String)>|is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"|IDS03-J]
[2020-12-08 16:13:26,336][][DEBUG][translate.py][create_usr_graph][Parsing Content ASSERT|<java.util.logging.Logger: void info(java.lang.String)>|is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"|IDS03-J]
[2020-12-08 16:13:26,336][][DEBUG][TagAssert.py][add_entry][Assert detected]
[2020-12-08 16:13:26,336][][DEBUG][TagAssert.py][add_entry][Assert detected]
[2020-12-08 16:13:26,336][][DEBUG][TagAssert.py][__init__][Creating assert]
[2020-12-08 16:13:26,336][][DEBUG][TagAssert.py][__init__][Creating assert]
[2020-12-08 16:13:26,336][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 16:13:26,336][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 16:13:26,337][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void info(java.lang.String)>]
[2020-12-08 16:13:26,337][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void info(java.lang.String)>]
[2020-12-08 16:13:26,337][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 16:13:26,337][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 16:13:26,337][][DEBUG][TagAssert.py][__init__][method_sig = void info(java.lang.String)]
[2020-12-08 16:13:26,337][][DEBUG][TagAssert.py][__init__][method_sig = void info(java.lang.String)]
[2020-12-08 16:13:26,337][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 16:13:26,337][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 16:13:26,337][][DEBUG][TagAssert.py][__init__][method name = info]
[2020-12-08 16:13:26,337][][DEBUG][TagAssert.py][__init__][method name = info]
[2020-12-08 16:13:26,337][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 16:13:26,337][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 16:13:26,337][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 16:13:26,337][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 16:13:26,337][][DEBUG][TagAssert.py][add_entry][adding (Assert, info, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str", IDS03-J) under java.util.logging.Logger: void info(java.lang.String)]
[2020-12-08 16:13:26,337][][DEBUG][TagAssert.py][add_entry][adding (Assert, info, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str", IDS03-J) under java.util.logging.Logger: void info(java.lang.String)]
[2020-12-08 16:13:26,337][][DEBUG][TagAssert.py][add_entry][{'java.util.logging.Logger': {'void severe(java.lang.String)': [(Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"), IDS03-J)], 'void info(java.lang.String)': [(Assert, info, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str", IDS03-J)]}}]
[2020-12-08 16:13:26,337][][DEBUG][TagAssert.py][add_entry][{'java.util.logging.Logger': {'void severe(java.lang.String)': [(Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"), IDS03-J)], 'void info(java.lang.String)': [(Assert, info, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str", IDS03-J)]}}]
[2020-12-08 16:13:26,337][][DEBUG][translate.py][create_fsm][Converting the user model to FSM model]
[2020-12-08 16:13:26,337][][DEBUG][translate.py][create_fsm][Converting the user model to FSM model]
[2020-12-08 16:13:26,337][][INFO][TagAssert.py][create_file][Create path for java.util.logging.Logger]
[2020-12-08 16:13:26,337][][INFO][TagAssert.py][create_file][Create path for java.util.logging.Logger]
[2020-12-08 16:13:26,337][][DEBUG][TagAssert.py][create_file][file is java/util/logging/Logger.h]
[2020-12-08 16:13:26,337][][DEBUG][TagAssert.py][create_file][file is java/util/logging/Logger.h]
[2020-12-08 16:13:26,337][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/util/logging/Logger.h' mode='w' encoding='UTF-8'>]
[2020-12-08 16:13:26,337][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/util/logging/Logger.h' mode='w' encoding='UTF-8'>]
[2020-12-08 16:13:26,337][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 16:13:26,337][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 16:13:26,341][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 16:13:26,341][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 16:13:26,341][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 16:13:26,341][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 16:13:26,341][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 16:13:26,341][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 16:13:26,341][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 16:13:26,341][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 16:13:26,341][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 16:13:26,341][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 16:13:26,341][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 16:13:26,341][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 16:13:26,341][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 16:13:26,341][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 16:13:26,341][][DEBUG][TagAssert.py][write_func_signature][writing]
[2020-12-08 16:13:26,341][][DEBUG][TagAssert.py][write_func_signature][writing]
[2020-12-08 16:13:26,341][][DEBUG][TagAssert.py][write_func_body][writing (Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"), IDS03-J) into java/util/logging/Logger.h]
[2020-12-08 16:13:26,341][][DEBUG][TagAssert.py][write_func_body][writing (Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"), IDS03-J) into java/util/logging/Logger.h]
[2020-12-08 16:13:26,341][][DEBUG][TagAssert.py][write_func_body][raw string assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:26,341][][DEBUG][TagAssert.py][write_func_body][raw string assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][parse][---------------]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][parse][---------------]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][parse][Parsing condition: assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][parse][Parsing condition: assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][__init__][Node intialisation with assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][__init__][Node intialisation with assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][__init__][Parent: assert, children: is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J"]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][__init__][Parent: assert, children: is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J"]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][add_children][Adding ['is_tag_attr_set(arg(1)', ' "tainted"', ' "sanitize_fmt_str")', '"IDS03-J"'] as children to assert]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][add_children][Adding ['is_tag_attr_set(arg(1)', ' "tainted"', ' "sanitize_fmt_str")', '"IDS03-J"'] as children to assert]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][api_add_assert][children of RBC_ASSERT]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][api_add_assert][children of RBC_ASSERT]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][__init__][Node intialisation with is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str")]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][__init__][Node intialisation with is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str")]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][__init__][Parent: is_tag_attr_set, children: arg(1), "tainted", "sanitize_fmt_str"]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][__init__][Parent: is_tag_attr_set, children: arg(1), "tainted", "sanitize_fmt_str"]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][add_children][Adding ['arg(1)', ' "tainted"', ' "sanitize_fmt_str"'] as children to is_tag_attr_set]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][add_children][Adding ['arg(1)', ' "tainted"', ' "sanitize_fmt_str"'] as children to is_tag_attr_set]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][api_add_is_attr_set][children of IS_ATTR_SET api]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][api_add_is_attr_set][children of IS_ATTR_SET api]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][__init__][Node intialisation with arg(1)]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][__init__][Node intialisation with arg(1)]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][__init__][Parent: arg, children: 1]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][__init__][Parent: arg, children: 1]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][add_children][Adding ['1'] as children to arg]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][add_children][Adding ['1'] as children to arg]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][api_add_arg][children of ARG api]
[2020-12-08 16:13:26,341][][DEBUG][ConditionParse.py][api_add_arg][children of ARG api]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][__init__][Node intialisation with 1]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][__init__][Node intialisation with 1]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "tainted"]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "tainted"]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "sanitize_fmt_str"]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "sanitize_fmt_str"]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][__init__][Node intialisation with "IDS03-J"]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][__init__][Node intialisation with "IDS03-J"]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_fmt_str"]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_fmt_str"]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][ "sanitize_fmt_str" contains no children]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][ "sanitize_fmt_str" contains no children]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 16:13:26,342][][DEBUG][TagAssert.py][write_func_body][RBC_ASSERT(RBC_IS_TAG_ATTR_SET(GET_ARG(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:26,342][][DEBUG][TagAssert.py][write_func_body][RBC_ASSERT(RBC_IS_TAG_ATTR_SET(GET_ARG(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_fmt_str"]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_fmt_str"]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][ "sanitize_fmt_str" contains no children]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][ "sanitize_fmt_str" contains no children]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 16:13:26,342][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 16:13:26,342][][DEBUG][TagAssert.py][write_ret][write_ret params: void]
[2020-12-08 16:13:26,342][][DEBUG][TagAssert.py][write_ret][write_ret params: void]
[2020-12-08 16:13:26,342][][DEBUG][TagAssert.py][write_ret][to write: ]
[2020-12-08 16:13:26,342][][DEBUG][TagAssert.py][write_ret][to write: ]
[2020-12-08 16:13:26,343][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 16:13:26,343][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 16:13:26,343][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void info(java.lang.String)>]
[2020-12-08 16:13:26,343][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void info(java.lang.String)>]
[2020-12-08 16:13:26,343][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 16:13:26,343][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 16:13:26,343][][DEBUG][TagAssert.py][__init__][method_sig = void info(java.lang.String)]
[2020-12-08 16:13:26,343][][DEBUG][TagAssert.py][__init__][method_sig = void info(java.lang.String)]
[2020-12-08 16:13:26,343][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 16:13:26,343][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 16:13:26,343][][DEBUG][TagAssert.py][__init__][method name = info]
[2020-12-08 16:13:26,343][][DEBUG][TagAssert.py][__init__][method name = info]
[2020-12-08 16:13:26,343][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 16:13:26,343][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 16:13:26,343][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 16:13:26,343][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 16:13:26,343][][DEBUG][TagAssert.py][write_func_signature][writing]
[2020-12-08 16:13:26,343][][DEBUG][TagAssert.py][write_func_signature][writing]
[2020-12-08 16:13:26,343][][DEBUG][TagAssert.py][write_func_body][writing (Assert, info, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str", IDS03-J) into java/util/logging/Logger.h]
[2020-12-08 16:13:26,343][][DEBUG][TagAssert.py][write_func_body][writing (Assert, info, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str", IDS03-J) into java/util/logging/Logger.h]
[2020-12-08 16:13:26,343][][DEBUG][TagAssert.py][write_func_body][raw string assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str","IDS03-J")]
[2020-12-08 16:13:26,343][][DEBUG][TagAssert.py][write_func_body][raw string assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str","IDS03-J")]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][parse][---------------]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][parse][---------------]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][parse][Parsing condition: assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str","IDS03-J")]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][parse][Parsing condition: assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str","IDS03-J")]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][__init__][Node intialisation with assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str","IDS03-J")]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][__init__][Node intialisation with assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str","IDS03-J")]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][__init__][Parent: assert, children: is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str","IDS03-J"]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][__init__][Parent: assert, children: is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str","IDS03-J"]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][add_children][Adding ['is_tag_attr_set(arg(1)', ' "tainted"', ' "sanitize_fmt_str"', '"IDS03-J"'] as children to assert]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][add_children][Adding ['is_tag_attr_set(arg(1)', ' "tainted"', ' "sanitize_fmt_str"', '"IDS03-J"'] as children to assert]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][api_add_assert][children of RBC_ASSERT]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][api_add_assert][children of RBC_ASSERT]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][__init__][Node intialisation with is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][__init__][Node intialisation with is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][__init__][Parent: is_tag_attr_set, children: arg(1]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][__init__][Parent: is_tag_attr_set, children: arg(1]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][add_children][Adding ['arg(1'] as children to is_tag_attr_set]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][add_children][Adding ['arg(1'] as children to is_tag_attr_set]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][api_add_is_attr_set][children of IS_ATTR_SET api]
[2020-12-08 16:13:26,343][][DEBUG][ConditionParse.py][api_add_is_attr_set][children of IS_ATTR_SET api]
[2020-12-08 16:13:26,344][][ERROR][ConditionParse.py][api_add_is_attr_set][wrong usage of IS_ATTR_SET api]
[2020-12-08 16:13:26,344][][ERROR][ConditionParse.py][api_add_is_attr_set][wrong usage of IS_ATTR_SET api]
[2020-12-08 16:13:42,922][][DEBUG][translate.py][<module>][--------- TRANSLATION ---------]
[2020-12-08 16:13:42,922][][DEBUG][translate.py][<module>][--------- TRANSLATION ---------]
[2020-12-08 16:13:42,926][][DEBUG][translate.py][<module>][User Input Validation]
[2020-12-08 16:13:42,926][][DEBUG][translate.py][<module>][User Input Validation]
[2020-12-08 16:13:42,926][][DEBUG][translate.py][create_usr_graph][Parsing from file ids03.mi]
[2020-12-08 16:13:42,926][][DEBUG][translate.py][create_usr_graph][Parsing from file ids03.mi]
[2020-12-08 16:13:42,926][][DEBUG][translate.py][create_usr_graph][Parsing Content ASSERT|<java.util.logging.Logger: void severe(java.lang.String)>|is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str")|IDS03-J]
[2020-12-08 16:13:42,926][][DEBUG][translate.py][create_usr_graph][Parsing Content ASSERT|<java.util.logging.Logger: void severe(java.lang.String)>|is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str")|IDS03-J]
[2020-12-08 16:13:42,927][][DEBUG][TagAssert.py][add_entry][Assert detected]
[2020-12-08 16:13:42,927][][DEBUG][TagAssert.py][add_entry][Assert detected]
[2020-12-08 16:13:42,927][][DEBUG][TagAssert.py][__init__][Creating assert]
[2020-12-08 16:13:42,927][][DEBUG][TagAssert.py][__init__][Creating assert]
[2020-12-08 16:13:42,927][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 16:13:42,927][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 16:13:42,927][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 16:13:42,927][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 16:13:42,927][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 16:13:42,927][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 16:13:42,927][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 16:13:42,927][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 16:13:42,927][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 16:13:42,927][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 16:13:42,927][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 16:13:42,927][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 16:13:42,927][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 16:13:42,927][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 16:13:42,927][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 16:13:42,927][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 16:13:42,927][][DEBUG][TagAssert.py][add_entry][{'java.util.logging.Logger': {'void severe(java.lang.String)': [(Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"), IDS03-J)]}}]
[2020-12-08 16:13:42,927][][DEBUG][TagAssert.py][add_entry][{'java.util.logging.Logger': {'void severe(java.lang.String)': [(Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"), IDS03-J)]}}]
[2020-12-08 16:13:42,928][][DEBUG][translate.py][create_usr_graph][Parsing Content ASSERT|<java.util.logging.Logger: void info(java.lang.String)>|is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str")|IDS03-J]
[2020-12-08 16:13:42,928][][DEBUG][translate.py][create_usr_graph][Parsing Content ASSERT|<java.util.logging.Logger: void info(java.lang.String)>|is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str")|IDS03-J]
[2020-12-08 16:13:42,928][][DEBUG][TagAssert.py][add_entry][Assert detected]
[2020-12-08 16:13:42,928][][DEBUG][TagAssert.py][add_entry][Assert detected]
[2020-12-08 16:13:42,928][][DEBUG][TagAssert.py][__init__][Creating assert]
[2020-12-08 16:13:42,928][][DEBUG][TagAssert.py][__init__][Creating assert]
[2020-12-08 16:13:42,928][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 16:13:42,928][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 16:13:42,928][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void info(java.lang.String)>]
[2020-12-08 16:13:42,928][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void info(java.lang.String)>]
[2020-12-08 16:13:42,928][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 16:13:42,928][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 16:13:42,928][][DEBUG][TagAssert.py][__init__][method_sig = void info(java.lang.String)]
[2020-12-08 16:13:42,928][][DEBUG][TagAssert.py][__init__][method_sig = void info(java.lang.String)]
[2020-12-08 16:13:42,928][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 16:13:42,928][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 16:13:42,928][][DEBUG][TagAssert.py][__init__][method name = info]
[2020-12-08 16:13:42,928][][DEBUG][TagAssert.py][__init__][method name = info]
[2020-12-08 16:13:42,928][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 16:13:42,928][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 16:13:42,928][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 16:13:42,928][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 16:13:42,928][][DEBUG][TagAssert.py][add_entry][adding (Assert, info, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"), IDS03-J) under java.util.logging.Logger: void info(java.lang.String)]
[2020-12-08 16:13:42,928][][DEBUG][TagAssert.py][add_entry][adding (Assert, info, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"), IDS03-J) under java.util.logging.Logger: void info(java.lang.String)]
[2020-12-08 16:13:42,928][][DEBUG][TagAssert.py][add_entry][{'java.util.logging.Logger': {'void severe(java.lang.String)': [(Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"), IDS03-J)], 'void info(java.lang.String)': [(Assert, info, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"), IDS03-J)]}}]
[2020-12-08 16:13:42,928][][DEBUG][TagAssert.py][add_entry][{'java.util.logging.Logger': {'void severe(java.lang.String)': [(Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"), IDS03-J)], 'void info(java.lang.String)': [(Assert, info, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"), IDS03-J)]}}]
[2020-12-08 16:13:42,928][][DEBUG][translate.py][create_fsm][Converting the user model to FSM model]
[2020-12-08 16:13:42,928][][DEBUG][translate.py][create_fsm][Converting the user model to FSM model]
[2020-12-08 16:13:42,928][][INFO][TagAssert.py][create_file][Create path for java.util.logging.Logger]
[2020-12-08 16:13:42,928][][INFO][TagAssert.py][create_file][Create path for java.util.logging.Logger]
[2020-12-08 16:13:42,929][][DEBUG][TagAssert.py][create_file][file is java/util/logging/Logger.h]
[2020-12-08 16:13:42,929][][DEBUG][TagAssert.py][create_file][file is java/util/logging/Logger.h]
[2020-12-08 16:13:42,929][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/util/logging/Logger.h' mode='w' encoding='UTF-8'>]
[2020-12-08 16:13:42,929][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/util/logging/Logger.h' mode='w' encoding='UTF-8'>]
[2020-12-08 16:13:42,929][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 16:13:42,929][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 16:13:42,929][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 16:13:42,929][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void severe(java.lang.String)>]
[2020-12-08 16:13:42,930][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 16:13:42,930][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 16:13:42,930][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 16:13:42,930][][DEBUG][TagAssert.py][__init__][method_sig = void severe(java.lang.String)]
[2020-12-08 16:13:42,930][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 16:13:42,930][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 16:13:42,930][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 16:13:42,930][][DEBUG][TagAssert.py][__init__][method name = severe]
[2020-12-08 16:13:42,930][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 16:13:42,930][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 16:13:42,930][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 16:13:42,930][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 16:13:42,930][][DEBUG][TagAssert.py][write_func_signature][writing]
[2020-12-08 16:13:42,930][][DEBUG][TagAssert.py][write_func_signature][writing]
[2020-12-08 16:13:42,930][][DEBUG][TagAssert.py][write_func_body][writing (Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"), IDS03-J) into java/util/logging/Logger.h]
[2020-12-08 16:13:42,930][][DEBUG][TagAssert.py][write_func_body][writing (Assert, severe, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"), IDS03-J) into java/util/logging/Logger.h]
[2020-12-08 16:13:42,930][][DEBUG][TagAssert.py][write_func_body][raw string assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:42,930][][DEBUG][TagAssert.py][write_func_body][raw string assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][parse][---------------]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][parse][---------------]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][parse][Parsing condition: assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][parse][Parsing condition: assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][Node intialisation with assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][Node intialisation with assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][Parent: assert, children: is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J"]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][Parent: assert, children: is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J"]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][add_children][Adding ['is_tag_attr_set(arg(1)', ' "tainted"', ' "sanitize_fmt_str")', '"IDS03-J"'] as children to assert]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][add_children][Adding ['is_tag_attr_set(arg(1)', ' "tainted"', ' "sanitize_fmt_str")', '"IDS03-J"'] as children to assert]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][api_add_assert][children of RBC_ASSERT]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][api_add_assert][children of RBC_ASSERT]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][Node intialisation with is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str")]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][Node intialisation with is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str")]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][Parent: is_tag_attr_set, children: arg(1), "tainted", "sanitize_fmt_str"]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][Parent: is_tag_attr_set, children: arg(1), "tainted", "sanitize_fmt_str"]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][add_children][Adding ['arg(1)', ' "tainted"', ' "sanitize_fmt_str"'] as children to is_tag_attr_set]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][add_children][Adding ['arg(1)', ' "tainted"', ' "sanitize_fmt_str"'] as children to is_tag_attr_set]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][api_add_is_attr_set][children of IS_ATTR_SET api]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][api_add_is_attr_set][children of IS_ATTR_SET api]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][Node intialisation with arg(1)]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][Node intialisation with arg(1)]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][Parent: arg, children: 1]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][Parent: arg, children: 1]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][add_children][Adding ['1'] as children to arg]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][add_children][Adding ['1'] as children to arg]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][api_add_arg][children of ARG api]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][api_add_arg][children of ARG api]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][Node intialisation with 1]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][Node intialisation with 1]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "tainted"]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "tainted"]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "sanitize_fmt_str"]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "sanitize_fmt_str"]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][Node intialisation with "IDS03-J"]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][__init__][Node intialisation with "IDS03-J"]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 16:13:42,930][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_fmt_str"]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_fmt_str"]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][ "sanitize_fmt_str" contains no children]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][ "sanitize_fmt_str" contains no children]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 16:13:42,931][][DEBUG][TagAssert.py][write_func_body][RBC_ASSERT(RBC_IS_TAG_ATTR_SET(GET_ARG(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:42,931][][DEBUG][TagAssert.py][write_func_body][RBC_ASSERT(RBC_IS_TAG_ATTR_SET(GET_ARG(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_fmt_str"]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_fmt_str"]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][ "sanitize_fmt_str" contains no children]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][ "sanitize_fmt_str" contains no children]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 16:13:42,931][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 16:13:42,931][][DEBUG][TagAssert.py][write_ret][write_ret params: void]
[2020-12-08 16:13:42,931][][DEBUG][TagAssert.py][write_ret][write_ret params: void]
[2020-12-08 16:13:42,931][][DEBUG][TagAssert.py][write_ret][to write: ]
[2020-12-08 16:13:42,931][][DEBUG][TagAssert.py][write_ret][to write: ]
[2020-12-08 16:13:42,931][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 16:13:42,931][][INFO][TagAssert.py][__init__][Parsing a function]
[2020-12-08 16:13:42,934][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void info(java.lang.String)>]
[2020-12-08 16:13:42,934][][DEBUG][TagAssert.py][__init__][sig = <java.util.logging.Logger: void info(java.lang.String)>]
[2020-12-08 16:13:42,934][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 16:13:42,934][][DEBUG][TagAssert.py][__init__][class name = java.util.logging.Logger]
[2020-12-08 16:13:42,934][][DEBUG][TagAssert.py][__init__][method_sig = void info(java.lang.String)]
[2020-12-08 16:13:42,934][][DEBUG][TagAssert.py][__init__][method_sig = void info(java.lang.String)]
[2020-12-08 16:13:42,934][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 16:13:42,934][][DEBUG][TagAssert.py][__init__][return type = void]
[2020-12-08 16:13:42,934][][DEBUG][TagAssert.py][__init__][method name = info]
[2020-12-08 16:13:42,934][][DEBUG][TagAssert.py][__init__][method name = info]
[2020-12-08 16:13:42,934][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 16:13:42,934][][DEBUG][TagAssert.py][__init__][arguments = ['java.lang.String']]
[2020-12-08 16:13:42,934][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 16:13:42,934][][DEBUG][TagAssert.py][__init__][is interface = False]
[2020-12-08 16:13:42,934][][DEBUG][TagAssert.py][write_func_signature][writing]
[2020-12-08 16:13:42,934][][DEBUG][TagAssert.py][write_func_signature][writing]
[2020-12-08 16:13:42,934][][DEBUG][TagAssert.py][write_func_body][writing (Assert, info, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"), IDS03-J) into java/util/logging/Logger.h]
[2020-12-08 16:13:42,934][][DEBUG][TagAssert.py][write_func_body][writing (Assert, info, is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"), IDS03-J) into java/util/logging/Logger.h]
[2020-12-08 16:13:42,934][][DEBUG][TagAssert.py][write_func_body][raw string assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:42,934][][DEBUG][TagAssert.py][write_func_body][raw string assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:42,934][][DEBUG][ConditionParse.py][parse][---------------]
[2020-12-08 16:13:42,934][][DEBUG][ConditionParse.py][parse][---------------]
[2020-12-08 16:13:42,934][][DEBUG][ConditionParse.py][parse][Parsing condition: assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:42,934][][DEBUG][ConditionParse.py][parse][Parsing condition: assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:42,934][][DEBUG][ConditionParse.py][__init__][Node intialisation with assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:42,934][][DEBUG][ConditionParse.py][__init__][Node intialisation with assert(is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:42,934][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 16:13:42,934][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 16:13:42,934][][DEBUG][ConditionParse.py][__init__][Parent: assert, children: is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J"]
[2020-12-08 16:13:42,934][][DEBUG][ConditionParse.py][__init__][Parent: assert, children: is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str"),"IDS03-J"]
[2020-12-08 16:13:42,934][][DEBUG][ConditionParse.py][add_children][Adding ['is_tag_attr_set(arg(1)', ' "tainted"', ' "sanitize_fmt_str")', '"IDS03-J"'] as children to assert]
[2020-12-08 16:13:42,934][][DEBUG][ConditionParse.py][add_children][Adding ['is_tag_attr_set(arg(1)', ' "tainted"', ' "sanitize_fmt_str")', '"IDS03-J"'] as children to assert]
[2020-12-08 16:13:42,934][][DEBUG][ConditionParse.py][api_add_assert][children of RBC_ASSERT]
[2020-12-08 16:13:42,934][][DEBUG][ConditionParse.py][api_add_assert][children of RBC_ASSERT]
[2020-12-08 16:13:42,934][][DEBUG][ConditionParse.py][__init__][Node intialisation with is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str")]
[2020-12-08 16:13:42,934][][DEBUG][ConditionParse.py][__init__][Node intialisation with is_tag_attr_set(arg(1), "tainted", "sanitize_fmt_str")]
[2020-12-08 16:13:42,934][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 16:13:42,934][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][__init__][Parent: is_tag_attr_set, children: arg(1), "tainted", "sanitize_fmt_str"]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][__init__][Parent: is_tag_attr_set, children: arg(1), "tainted", "sanitize_fmt_str"]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][add_children][Adding ['arg(1)', ' "tainted"', ' "sanitize_fmt_str"'] as children to is_tag_attr_set]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][add_children][Adding ['arg(1)', ' "tainted"', ' "sanitize_fmt_str"'] as children to is_tag_attr_set]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][api_add_is_attr_set][children of IS_ATTR_SET api]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][api_add_is_attr_set][children of IS_ATTR_SET api]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][__init__][Node intialisation with arg(1)]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][__init__][Node intialisation with arg(1)]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][__init__][API detected]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][__init__][Parent: arg, children: 1]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][__init__][Parent: arg, children: 1]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][add_children][Adding ['1'] as children to arg]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][add_children][Adding ['1'] as children to arg]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][api_add_arg][children of ARG api]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][api_add_arg][children of ARG api]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][__init__][Node intialisation with 1]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][__init__][Node intialisation with 1]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "tainted"]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "tainted"]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "sanitize_fmt_str"]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][__init__][Node intialisation with  "sanitize_fmt_str"]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][__init__][Node intialisation with "IDS03-J"]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][__init__][Node intialisation with "IDS03-J"]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_fmt_str"]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_fmt_str"]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][ "sanitize_fmt_str" contains no children]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][ "sanitize_fmt_str" contains no children]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 16:13:42,935][][DEBUG][TagAssert.py][write_func_body][RBC_ASSERT(RBC_IS_TAG_ATTR_SET(GET_ARG(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:42,935][][DEBUG][TagAssert.py][write_func_body][RBC_ASSERT(RBC_IS_TAG_ATTR_SET(GET_ARG(1), "tainted", "sanitize_fmt_str"),"IDS03-J")]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][Translating content assert]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][Translating content is_tag_attr_set]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 16:13:42,935][][DEBUG][ConditionParse.py][translate][Translating content arg]
[2020-12-08 16:13:42,936][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 16:13:42,936][][DEBUG][ConditionParse.py][translate][Translating content 1]
[2020-12-08 16:13:42,936][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 16:13:42,936][][DEBUG][ConditionParse.py][translate][1 contains no children]
[2020-12-08 16:13:42,936][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 16:13:42,936][][DEBUG][ConditionParse.py][translate][Translating content  "tainted"]
[2020-12-08 16:13:42,936][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 16:13:42,936][][DEBUG][ConditionParse.py][translate][ "tainted" contains no children]
[2020-12-08 16:13:42,936][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_fmt_str"]
[2020-12-08 16:13:42,936][][DEBUG][ConditionParse.py][translate][Translating content  "sanitize_fmt_str"]
[2020-12-08 16:13:42,936][][DEBUG][ConditionParse.py][translate][ "sanitize_fmt_str" contains no children]
[2020-12-08 16:13:42,936][][DEBUG][ConditionParse.py][translate][ "sanitize_fmt_str" contains no children]
[2020-12-08 16:13:42,936][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 16:13:42,936][][DEBUG][ConditionParse.py][translate][Translating content "IDS03-J"]
[2020-12-08 16:13:42,936][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 16:13:42,936][][DEBUG][ConditionParse.py][translate]["IDS03-J" contains no children]
[2020-12-08 16:13:42,936][][DEBUG][TagAssert.py][write_ret][write_ret params: void]
[2020-12-08 16:13:42,936][][DEBUG][TagAssert.py][write_ret][write_ret params: void]
[2020-12-08 16:13:42,936][][DEBUG][TagAssert.py][write_ret][to write: ]
[2020-12-08 16:13:42,936][][DEBUG][TagAssert.py][write_ret][to write: ]
[2020-12-08 16:13:42,936][][DEBUG][TagAssert.py][generate][Dependencies: {'java.lang.String'}]
[2020-12-08 16:13:42,936][][DEBUG][TagAssert.py][generate][Dependencies: {'java.lang.String'}]
[2020-12-08 16:13:42,936][][DEBUG][TagAssert.py][create_dep_files][creating dep files with {'java.lang.String'}]
[2020-12-08 16:13:42,936][][DEBUG][TagAssert.py][create_dep_files][creating dep files with {'java.lang.String'}]
[2020-12-08 16:13:42,936][][INFO][TagAssert.py][create_file][Create path for java.lang.String]
[2020-12-08 16:13:42,936][][INFO][TagAssert.py][create_file][Create path for java.lang.String]
[2020-12-08 16:13:42,939][][DEBUG][TagAssert.py][create_file][file is java/lang/String.h]
[2020-12-08 16:13:42,939][][DEBUG][TagAssert.py][create_file][file is java/lang/String.h]
[2020-12-08 16:13:42,939][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/lang/String.h' mode='w' encoding='UTF-8'>]
[2020-12-08 16:13:42,939][][DEBUG][TagAssert.py][write_header][write header file of <_io.TextIOWrapper name='java/lang/String.h' mode='w' encoding='UTF-8'>]
[2020-12-08 16:13:42,939][][INFO][translate.py][<module>][Writing into rule.java]
[2020-12-08 16:13:42,939][][INFO][translate.py][<module>][Writing into rule.java]
